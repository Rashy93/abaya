{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/header/header.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","book","image","title","author","subtitle","description","href","link","target","rel","CardList","id","books","map","key","Header","placeholder","handleChange","type","onChange","htmlFor","App","state","searhField","e","setState","value","fetch","then","response","json","this","filteredBooks","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2UAIaA,G,MAAO,SAACC,GAAD,OAClB,yBAAKC,UAAU,sBACf,gCACE,yBAAKC,IAAI,OAAOC,IAAKH,EAAMI,KAAKC,QAClC,oCAAY,4BAAKL,EAAMI,KAAKE,SAE5B,yBAAKL,UAAU,gBACb,wBAAIA,UAAU,gDAAd,IAA+DD,EAAMI,KAAKE,MAA1E,IAAiF,uBAAGL,UAAU,wBAAb,cACjF,iCAAOD,EAAMI,KAAKG,OAAlB,MAEF,yBAAKN,UAAU,eACb,wBAAIA,UAAU,sCAAd,IAAqDD,EAAMI,KAAKE,MAAhE,IAAuE,uBAAGL,UAAU,wBAAb,UACvE,gCAAMD,EAAMI,KAAKI,SAAjB,KACA,+BAAKR,EAAMI,KAAKG,OAAhB,KACA,+BAAKP,EAAMI,KAAKK,YAAhB,MAEF,yBAAKR,UAAU,eACb,uBAAGS,KAAMV,EAAMI,KAAKO,KAAMC,OAAO,SAASC,IAAI,uBAA9C,mBCfSC,G,MAAW,SAACd,GAAD,OACtB,6BAASC,UAAU,QAAQc,GAAG,SAC9B,iCACGf,EAAMgB,MAAMC,KAAI,SAAAb,GAAI,OAClB,kBAAC,EAAD,CAAMc,IAAKd,EAAKW,GAAKX,KAAMA,WCNrBe,G,MAAS,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAcC,EAAjB,EAAiBA,aAAjB,OACtB,6BAASpB,UAAU,QACf,kDACA,iCACE,4LACA,8BACA,yBAAKA,UAAU,eACX,2BAAOA,UAAU,SAASqB,KAAK,SAASF,YAAaA,EAAaG,SAAUF,IAC5E,2BAAOpB,UAAU,aAAauB,QAAQ,WACtC,uBAAGvB,UAAU,kBAAb,eCmCKwB,G,uNAhCPC,MAAQ,CACPV,MAAO,GACPW,WAAY,I,EAWjBN,aAAe,SAACO,GACd,EAAKC,SAAS,CAAEF,WAAYC,EAAEhB,OAAOkB,S,mFAPlB,IAAD,OAClBC,MAAM,0DACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAhB,GAAK,OAAI,EAAKa,SAAU,CAACb,MAAOA,S,+BAO7B,IAAD,EACsBmB,KAAKT,MAA3BV,EADA,EACAA,MAAOW,EADP,EACOA,WACTS,EAAgBpB,EAAMqB,QAAO,SAAAjC,GAAI,OAAIA,EAAKE,MAAMgC,cAAcC,SAASZ,EAAWW,kBACxF,OACE,yBAAKrC,UAAU,OACf,kBAAC,EAAD,CAAQmB,YAAY,kBAAkBC,aAAcc,KAAKd,eACzD,6BACA,kBAAC,EAAD,CAAUL,MAAOoB,U,GA5BPI,cCAEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,MAAK,SAAAqB,GACjCA,EAAaC,kB","file":"static/js/main.eaa26768.chunk.js","sourcesContent":["import React from 'react';\n\nimport './card.styles.css'\n\nexport const Card = (props) => (\n  <div className=\"card sticky-action\">\n  <figure>\n    <img alt=\"book\" src={props.book.image}  />\n  <figcaption><h3>{props.book.title}</h3></figcaption>\n  </figure>\n  <div className=\"card-content\">\n    <h5 className=\"card-title activator grey-text text-darken-4\"> {props.book.title} <i className=\"material-icons right\">more_vert</i></h5>\n    <p>By {props.book.author} </p>\n  </div>\n  <div className=\"card-reveal\">\n    <h5 className=\"card-title grey-text text-darken-4\"> {props.book.title} <i className=\"material-icons right\">close</i></h5>\n    <h6> {props.book.subtitle} </h6>\n    <p> {props.book.author} </p>\n    <p> {props.book.description} </p>\n  </div>\n  <div className=\"card-action\">\n    <a href={props.book.link} target=\"_blank\" rel=\"noopener noreferrer\" > Read More </a>\n  </div>\n\n  </div>\n);\n\n","import React from 'react';\n\nimport { Card } from '../card/card.component'\n\nimport './card-list.styles.css'\n\nexport const CardList = (props) => (\n  <section className=\"books\" id=\"books\">\n  <article>\n    {props.books.map(book => (\n       <Card key={book.id}  book={book} />\n      ))}\n      </article>\n    </section>\n);","import React from 'react';\n\nimport './header.styles.css'\n\nexport const Header = ({ placeholder , handleChange}) => (\n<section className=\"hero\">\n    <h1>React Book Library</h1>\n    <article>\n      <p>Explore books with just one search and stirred by starlight across the centuries light years great turbulent clouds circumnavigated paroxysm of global death.</p>\n      <form>\n      <div className=\"input-field\">\n          <input className='search' type='search' placeholder={placeholder} onChange={handleChange} />\n          <label className=\"label-icon\" htmlFor=\"search\"></label>\n          <i className=\"material-icons\">close</i>\n      </div>\n  </form>\n    </article>\n  </section>\n);","import React, { Component } from 'react';\nimport { CardList } from './components/card-list/card-list.component';\n// import { NavBar } from './components/nav-bar/nav-bar.component'\nimport { Header } from './components/header/header.component'\n\n// import { SideBar } from './components/side-bar/side-bar.component'\n\n// import logo from './logo.svg';\nimport './App.css';\nimport './index.sass';\n\n\nclass App extends Component {\n    // constructor() {\n      // super();\n\n        state = {\n         books: [],\n         searhField: ''\n        };\n\n    // }\n\n    componentDidMount() {\n      fetch('https://my-json-server.typicode.com/Rashy93/demo/books')\n      .then(response => response.json())\n      .then(books => this.setState( {books: books}))\n    }\n\n    handleChange = (e) => {\n      this.setState({ searhField: e.target.value })\n    }\n\n    render () {\n      const { books, searhField } = this.state;\n      const filteredBooks = books.filter(book => book.title.toLowerCase().includes(searhField.toLowerCase()))\n      return (\n        <div className=\"App\">\n        <Header placeholder='Search books...' handleChange={this.handleChange} />\n        <div>\n        <CardList books={filteredBooks} />\n        </div>\n        \n        </div>\n      );\n    }\n  } \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}